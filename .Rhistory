plot_ly(., x = ~Date, y = ~Studio, type = "scatter", mode = "lines+markers", name = "Studio") %>%
add_trace(., x = ~Date, y = ~One_Bedroom, type = "scatter", mode = "lines+markers", name = "One Bedroom") %>%
add_trace(., x = ~Date, y = ~Two_Bedrooms, type = "scatter", mode = "lines+markers", name = "Two Bedrooms") %>%
add_trace(., x = ~Date, y = ~Three_Bedrooms, type = "scatter", mode = "lines+markers", name = "Three+ Bedrooms") %>% layout(title = paste("Median Rent in", input$neighborhood, "Across Apartment Types"), hovermode = "x", yaxis = list(title=""))
}
})
#--- DATA SPREADSHEET ---#
output$df <- renderDataTable({ df }, options = list(pageLength = 10))
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(tidyverse)
library(broom)
library(httr)
library(rgdal)
library(leaflet)
library(plotly)
library(shinythemes)
# getting data
df <- read_rds("data/all_data.rds")
df_longer <- read_rds("data/all_data_longer.rds")
r <- GET('http://data.beta.nyc//dataset/0ff93d2d-90ba-457c-9f7e-39e47bf2ac5f/resource/35dd04fb-81b3-479b-a074-a27a37888ce7/download/d085e2f8d0b54d4590b1e7d1f35594c1pediacitiesnycneighborhoods.geojson')
nyc_neighborhoods <- readOGR(dsn = content(r,'text'), verbose = F)
ui <- fluidPage(theme = shinytheme("cosmo"),
tags$head(
tags$style(HTML("
.shiny-output-error-black {
color: black;
font-size: 200%;
display: flex;
align-items: center;
}"
)
)
),
# App title
navbarPage("RENT DATA FOR NEW YORK CITY", collapsable = TRUE,
# tab 1 - map and time series
# perhaps we can structure this section so that there are three
# blocks, upper left, upper right and bottom which hold user input
# map and time series respectively
tabPanel("Map and Time Series Analysis",
fluidRow(
# left column
column(4,
# user input row
fluidRow(
selectInput("boro", "Select a borough:",
choices = c("Manhattan", "Brooklyn", "Queens", "Bronx"),
selected = "Manhattan"),
uiOutput("areaSelect"),
selectInput("type", "Select an apartment type:",
choices = c("Studio",
"One Bedroom" = "One_Bedroom",
"Two Bedrooms" = "Two_Bedrooms",
"Three+ Bedrooms" = "Three_Bedrooms"),
selected = "Studio")
),
# home page text row
fluidRow(h1("Home Page"), p("Some basic text"))),
# right column
column(8,
fluidRow(leafletOutput("mapPlot")), # MAP PLOT
fluidRow(plotlyOutput("ts_single"))) # PLOT OUTPUT
)
),
# tab 2 - various plots of data
tabPanel("Data Distributions and Plots",
fluidRow(
column(4),
column(8, plotlyOutput("ts_multiple"))
)
),
# tab 3 - Regression and ANOVA
tabPanel("Statistical Analysis",
sidebarLayout(
sidebarPanel(
# user input
),
mainPanel(
# chart output
)
)
),
# tab 4 - data spreadsheet
tabPanel("Data Spreadsheet", dataTableOutput("df"))
)
)
server <- function(input, output, session) {
#--- REACTIVE FUNCTIONS ---#
# locations available by Borough, Neighborhood, longitude and latitude
areaList = reactive({
df %>%
select(Borough, Neighborhood, Longitude, Latitude) %>%
distinct() %>%
inner_join(nyc_neighborhoods@data$neighborhood %>% as.data.frame() %>%
distinct() %>% rename("Neighborhood" = "."), by = "Neighborhood") %>%
filter(!is.na(Latitude), !is.na(Longitude))
})
# filters data frame for time series plot with single apt type (ts_single)
ts_single <- reactive({
df_longer %>%
filter(Borough == input$boro, Neighborhood == input$neighborhood,
!is.na(Median_Rent))
})
ts_singleBoro <- reactive({
df_longer %>%
filter(Borough == input$boro, !is.na(Median_Rent)) %>% group_by(Date) %>% summarize(Med_RentBoro = median(Median_Rent))
})
# filters data frame for time series plot with multiple apt types (ts_multiple)
ts_multiple <- reactive({
df %>%
filter(Borough == input$boro, Neighborhood == input$neighborhood,
!is.na(Studio),
!is.na(One_Bedroom),
!is.na(Two_Bedrooms),
!is.na(Three_Bedrooms))
})
#--- HELPER FUNCTIONS ---#
# grabs coordinates for map
getCoordinates <- function(area) {
areaList() %>%
filter(Neighborhood == area) %>%
select(Longitude, Latitude)
}
#--- PLOTS ---#
# render the neighborhood selector input
output$areaSelect = renderUI({
selectInput("neighborhood", "Select a neighborhood:",
choices = c("None", areaList() %>% filter(Borough == input$boro) %>% select(Neighborhood) %>% pull()),
selected = "None")
})
# render the leaflet plot for showing the location of the selected neighborhood
output$mapPlot = renderLeaflet({
if (input$neighborhood == "None") {
leaflet(height = "380px") %>%
addTiles() %>%
setView(-73.87, 40.73, zoom = 10)
} else {
nyc_neighborhoods[nyc_neighborhoods@data$neighborhood == input$neighborhood,] %>%
leaflet(height = "380px") %>%
addTiles() %>%
setView(getCoordinates(input$neighborhood)$Longitude,
getCoordinates(input$neighborhood)$Latitude,
zoom = 13) %>%
addPolygons(popup = ~neighborhood,
weight = 1,
fillColor = "Blue", fillOpacity = 0.35)
}
})
output$ts_single <- renderPlotly({
if(input$neighborhood == "None"){
ts_singleBoro() %>%
plot_ly(., x = ~Date, y = ~Med_RentBoro, type = "scatter", mode = "lines+markers") %>%
layout(yaxis = list(title = paste("Median Rent for", input$boro)))
} else if(ts_single() %>% filter(Type == input$type) %>% nrow() < 10){
validate("We apologize, but there is not enough data to produce an informative plot. Please select a different combination of inputs.", errorClass = "black")
}
else{
ts_single() %>%
filter(Type == input$type) %>%
plot_ly(., x = ~Date, y = ~Median_Rent, type = "scatter", mode = "lines+markers")
}
})
output$ts_multiple <- renderPlotly({
if(input$neighborhood == "None"){plotly_empty()} else{
ts_multiple() %>%
plot_ly(., x = ~Date, y = ~Studio, type = "scatter", mode = "lines", name = "Studio") %>%
add_trace(., x = ~Date, y = ~One_Bedroom, type = "scatter", mode = "lines+markers", name = "One Bedroom") %>%
add_trace(., x = ~Date, y = ~Two_Bedrooms, type = "scatter", mode = "lines+markers", name = "Two Bedrooms") %>%
add_trace(., x = ~Date, y = ~Three_Bedrooms, type = "scatter", mode = "lines+markers", name = "Three+ Bedrooms") %>% layout(title = paste("Median Rent in", input$neighborhood, "Across Apartment Types"), hovermode = "x", yaxis = list(title=""))
}
})
#--- DATA SPREADSHEET ---#
output$df <- renderDataTable({ df }, options = list(pageLength = 10))
}
shinyApp(ui, server)
?validate
library(shiny)
library(ggplot2)
library(tidyverse)
library(broom)
library(httr)
library(rgdal)
library(leaflet)
library(plotly)
library(shinythemes)
# getting data
df <- read_rds("data/all_data.rds")
df_longer <- read_rds("data/all_data_longer.rds")
r <- GET('http://data.beta.nyc//dataset/0ff93d2d-90ba-457c-9f7e-39e47bf2ac5f/resource/35dd04fb-81b3-479b-a074-a27a37888ce7/download/d085e2f8d0b54d4590b1e7d1f35594c1pediacitiesnycneighborhoods.geojson')
nyc_neighborhoods <- readOGR(dsn = content(r,'text'), verbose = F)
ui <- fluidPage(theme = shinytheme("cosmo"),
tags$head(
tags$style(HTML("
.shiny-output-error-black {
color: black;
font-size: 200%;
display: flex;
align-items: center;
}"
)
)
),
# App title
navbarPage("RENT DATA FOR NEW YORK CITY", collapsable = TRUE,
# tab 1 - map and time series
# perhaps we can structure this section so that there are three
# blocks, upper left, upper right and bottom which hold user input
# map and time series respectively
tabPanel("Map and Time Series Analysis",
fluidRow(
# left column
column(4,
# user input row
fluidRow(
selectInput("boro", "Select a borough:",
choices = c("Manhattan", "Brooklyn", "Queens", "Bronx"),
selected = "Manhattan"),
uiOutput("areaSelect"),
selectInput("type", "Select an apartment type:",
choices = c("Studio",
"One Bedroom" = "One_Bedroom",
"Two Bedrooms" = "Two_Bedrooms",
"Three+ Bedrooms" = "Three_Bedrooms"),
selected = "Studio")
),
# home page text row
fluidRow(h1("Home Page"), p("Some basic text"))),
# right column
column(8,
fluidRow(leafletOutput("mapPlot")), # MAP PLOT
fluidRow(plotlyOutput("ts_single"))) # PLOT OUTPUT
)
),
# tab 2 - various plots of data
tabPanel("Data Distributions and Plots",
fluidRow(
column(4),
column(8, plotlyOutput("ts_multiple"))
)
),
# tab 3 - Regression and ANOVA
tabPanel("Statistical Analysis",
sidebarLayout(
sidebarPanel(
# user input
),
mainPanel(
# chart output
)
)
),
# tab 4 - data spreadsheet
tabPanel("Data Spreadsheet", dataTableOutput("df"))
)
)
server <- function(input, output, session) {
#--- REACTIVE FUNCTIONS ---#
# locations available by Borough, Neighborhood, longitude and latitude
areaList = reactive({
df %>%
select(Borough, Neighborhood, Longitude, Latitude) %>%
distinct() %>%
inner_join(nyc_neighborhoods@data$neighborhood %>% as.data.frame() %>%
distinct() %>% rename("Neighborhood" = "."), by = "Neighborhood") %>%
filter(!is.na(Latitude), !is.na(Longitude))
})
# filters data frame for time series plot with single apt type (ts_single)
ts_single <- reactive({
df_longer %>%
filter(Borough == input$boro, Neighborhood == input$neighborhood,
!is.na(Median_Rent))
})
ts_singleBoro <- reactive({
df_longer %>%
filter(Borough == input$boro, !is.na(Median_Rent)) %>% group_by(Date) %>% summarize(Med_RentBoro = median(Median_Rent))
})
# filters data frame for time series plot with multiple apt types (ts_multiple)
ts_multiple <- reactive({
df %>%
filter(Borough == input$boro, Neighborhood == input$neighborhood,
!is.na(Studio),
!is.na(One_Bedroom),
!is.na(Two_Bedrooms),
!is.na(Three_Bedrooms))
})
#--- HELPER FUNCTIONS ---#
# grabs coordinates for map
getCoordinates <- function(area) {
areaList() %>%
filter(Neighborhood == area) %>%
select(Longitude, Latitude)
}
#--- PLOTS ---#
# render the neighborhood selector input
output$areaSelect = renderUI({
selectInput("neighborhood", "Select a neighborhood:",
choices = c("None", areaList() %>% filter(Borough == input$boro) %>% select(Neighborhood) %>% pull()),
selected = "None")
})
# render the leaflet plot for showing the location of the selected neighborhood
output$mapPlot = renderLeaflet({
if (input$neighborhood == "None") {
leaflet(height = "380px") %>%
addTiles() %>%
setView(-73.87, 40.73, zoom = 10)
} else {
nyc_neighborhoods[nyc_neighborhoods@data$neighborhood == input$neighborhood,] %>%
leaflet(height = "380px") %>%
addTiles() %>%
setView(getCoordinates(input$neighborhood)$Longitude,
getCoordinates(input$neighborhood)$Latitude,
zoom = 13) %>%
addPolygons(popup = ~neighborhood,
weight = 1,
fillColor = "Blue", fillOpacity = 0.35)
}
})
output$ts_single <- renderPlotly({
if(input$neighborhood == "None"){
ts_singleBoro() %>%
plot_ly(., x = ~Date, y = ~Med_RentBoro, type = "scatter", mode = "lines+markers") %>%
layout(yaxis = list(title = paste("Median Rent for", input$boro)))
} else if(ts_single() %>% filter(Type == input$type) %>% nrow() < 10){
validate("We apologize, but there is not enough data to produce an informative plot. Please select a different combination of inputs.")
}
else{
ts_single() %>%
filter(Type == input$type) %>%
plot_ly(., x = ~Date, y = ~Median_Rent, type = "scatter", mode = "lines+markers")
}
})
output$ts_multiple <- renderPlotly({
if(input$neighborhood == "None"){plotly_empty()} else{
ts_multiple() %>%
plot_ly(., x = ~Date, y = ~Studio, type = "scatter", mode = "lines+markers", name = "Studio") %>%
add_trace(., x = ~Date, y = ~One_Bedroom, type = "scatter", mode = "lines+markers", name = "One Bedroom") %>%
add_trace(., x = ~Date, y = ~Two_Bedrooms, type = "scatter", mode = "lines+markers", name = "Two Bedrooms") %>%
add_trace(., x = ~Date, y = ~Three_Bedrooms, type = "scatter", mode = "lines+markers", name = "Three+ Bedrooms") %>% layout(title = paste("Median Rent in", input$neighborhood, "Across Apartment Types"), hovermode = "x", yaxis = list(title=""))
}
})
#--- DATA SPREADSHEET ---#
output$df <- renderDataTable({ df }, options = list(pageLength = 10))
}
shinyApp(ui, server)
library(shiny)
library(ggplot2)
library(tidyverse)
library(broom)
library(httr)
library(rgdal)
library(leaflet)
library(plotly)
library(shinythemes)
df <- read_rds("data/all_data.rds")
r <- GET('http://data.beta.nyc//dataset/0ff93d2d-90ba-457c-9f7e-39e47bf2ac5f/resource/35dd04fb-81b3-479b-a074-a27a37888ce7/download/d085e2f8d0b54d4590b1e7d1f35594c1pediacitiesnycneighborhoods.geojson')
nyc_neighborhoods <- readOGR(dsn = content(r,'text'), verbose = F)
df_longer <- pivot_longer(df, cols = 4:7, names_to = "Type", values_to = "Median_Rent") %>% filter(!is.na(Median_Rent)) # New pivoted longer version of df. It's so that we can work with plots in more efficient way. Attempted to just do this in a reactive function, but it doesn't work.
ui <- fluidPage(theme = shinytheme("cosmo"),
tags$head(
tags$style(HTML("
.shiny-output-error-black {
color: black;
font-size: 200%;
display: flex;
align-items: center;
}
"))
),
# App title
navbarPage("RENT DATA FOR NEW YORK CITY", collapsable = TRUE,
# tab 1 - map and time series
# perhaps we can structure this section so that there are three
# blocks, upper left, upper right and bottom which hold user input
# map and time series respectively
tabPanel("Map and Time Series Analysis",
sidebarLayout(
sidebarPanel(
# USER INPUT
selectInput("boro", "Select a borough:",
choices = c("Manhattan", "Brooklyn", "Queens", "Bronx"), selected = "Manhattan"),
uiOutput("areaSelect"), # This is needed to update the option based on the selected input above.
selectInput("type", "Select an apartment type:",
choices = c("Studio",
"One Bedroom" = "One_Bedroom",
"Two Bedrooms" = "Two_Bedrooms",
"Three+ Bedrooms" = "Three_Bedrooms"),
selected = "Studio")),
mainPanel(
# MAP OUTPUT
leafletOutput("mapPlot"),
# PLOT OUTPUT
plotlyOutput("ts_single")
)
)),
# tab 2 - various plots of data
tabPanel("Data Distributions and Plots",
sidebarLayout(
sidebarPanel(
# user input
),
mainPanel(
# chart output
plotlyOutput("ts_multiple")
)
)),
# tab 3 - Regression and ANOVA
tabPanel("Statistical Analysis",
sidebarLayout(
sidebarPanel(
# user input
),
mainPanel(
# chart output
)
)),
# tab 4 - data spreadsheet
tabPanel("Data Spreadsheet",
dataTableOutput("df")
)
)
)
server <- function(input, output, session) {
#--- REACTIVE FUNCTIONS ---#
# locations available by Borough, Neighborhood, longitude and latitude
areaList = reactive({
df %>%
select(Borough, Neighborhood, Longitude, Latitude) %>%
distinct() %>%
inner_join(nyc_neighborhoods@data$neighborhood %>% as.data.frame() %>% distinct() %>% rename("Neighborhood" = "."), by = "Neighborhood") %>%
filter(!is.na(Latitude), !is.na(Longitude))
})
# filters data frame for time series plot with single apt type (ts_single)
ts_single <- reactive({
df_longer %>%
filter(Borough == input$boro, Neighborhood == input$neighborhood,
!is.na(Median_Rent))
})
ts_singleBoro <- reactive({
df_longer %>%
filter(Borough == input$boro, !is.na(Median_Rent)) %>% group_by(Date) %>% summarize(Med_RentBoro = median(Median_Rent))
})
# filters data frame for time series plot with multiple apt types (ts_multiple)
ts_multiple <- reactive({
df %>%
filter(Borough == input$boro, Neighborhood == input$neighborhood,
!is.na(Studio),
!is.na(One_Bedroom),
!is.na(Two_Bedrooms),
!is.na(Three_Bedrooms))
})
#--- HELPER FUNCTIONS ---#
# grabs coordinates for map
getCoordinates <- function(area) {
areaList() %>%
filter(Neighborhood == area) %>%
select(Longitude, Latitude)
}
#--- PLOTS ---#
# render the neighborhood selector input
output$areaSelect = renderUI({
selectInput("neighborhood", "Select a neighborhood:",
choices = c("None", areaList() %>% filter(Borough == input$boro) %>% select(Neighborhood) %>% pull()),
selected = "None")
})
# render the leaflet plot for showing the location of the selected neighborhood
output$mapPlot = renderLeaflet({
if (input$neighborhood == "None") {
leaflet(height = "380px") %>%
addTiles() %>%
setView(-73.87, 40.73, zoom = 10)
} else {
nyc_neighborhoods[nyc_neighborhoods@data$neighborhood == input$neighborhood,] %>%
leaflet(height = "380px") %>%
addTiles() %>%
setView(getCoordinates(input$neighborhood)$Longitude,
getCoordinates(input$neighborhood)$Latitude,
zoom = 13) %>%
addPolygons(popup = ~neighborhood,
weight = 1,
fillColor = "Blue", fillOpacity = 0.35)
}
})
output$ts_single <- renderPlotly({
if(input$neighborhood == "None"){
ts_singleBoro() %>%
plot_ly(., x = ~Date, y = ~Med_RentBoro, type = "scatter", mode = "lines+markers") %>%
layout(yaxis = list(title = paste("Median Rent for", input$boro)))
} else if(ts_single() %>% filter(Type == input$type) %>% nrow() < 10){
validate("We apologize, but there is not enough data to produce an informative plot. Please select a different combination of inputs.", errorClass = "black")
}
else{
ts_single() %>%
filter(Type == input$type) %>%
plot_ly(., x = ~Date, y = ~Median_Rent, type = "scatter", mode = "lines+markers")
}
})
output$ts_multiple <- renderPlotly({
if(input$neighborhood == "None"){plotly_empty()} else{
ts_multiple() %>%
plot_ly(., x = ~Date, y = ~Studio, type = "scatter", mode = "lines+markers", name = "Studio") %>%
add_trace(., x = ~Date, y = ~One_Bedroom, type = "scatter", mode = "lines+markers", name = "One Bedroom") %>%
add_trace(., x = ~Date, y = ~Two_Bedrooms, type = "scatter", mode = "lines+markers", name = "Two Bedrooms") %>%
add_trace(., x = ~Date, y = ~Three_Bedrooms, type = "scatter", mode = "lines+markers", name = "Three+ Bedrooms") %>% layout(title = paste("Median Rent in", input$neighborhood, "Across Apartment Types"), hovermode = "x", yaxis = list(title=""))
}
})
#--- DATA SPREADSHEET ---#
output$df <- renderDataTable({ df }, options = list(pageLength = 10))
}
shinyApp(ui, server)
